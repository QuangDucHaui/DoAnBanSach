

version: '3.7'
services:
  mysql8-container:
    container_name: mysql8-container
    image: mysql:8.2.0    
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: Abc123456789@
      MYSQL_DATABASE: ShopApp
    ports:
      - 3307:3306
    volumes: 
      - ./sql/shopapp.sql:/docker-entrypoint-initdb.d/init-script.sql
    networks:
      - shopapp-network

  phpmyadmin8-container:
    image: phpmyadmin/phpmyadmin   
    container_name: phpmyadmin8-container
    restart: always
    depends_on:
      - mysql8-container      
    ports:
      - "8100:80" 
    environment:
      PMA_HOST: mysql8-container 
    networks:
      - shopapp-network
  
  redis-container:
    image: docker.io/redis:7.2.3
    container_name: redis-container
    restart: always
    ports:
      - "6379:6379" 
    volumes:
      - ./redis-data:/data 
    networks:
      - shopapp-network

  shopapp-spring-container:    
    container_name: shopapp-spring-container    
    build:
      context: .
      dockerfile: DockerfileJavaSpring      
    ports:
      - 8099:8088
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql8-container:3306/ShopApp?serverTimezone=UTC&allowPublicKeyRetrieval=true
      MYSQL_ROOT_PASSWORD: Abc123456789@
      REDIS_HOST: redis-container
      REDIS_PORT: 6379
    depends_on:      
      - mysql8-container
    networks:
      - shopapp-network    
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8088/api/v1/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s     

  shopapp-angular-container:  
    container_name: shopapp-angular-container    
    build:
      context: .
      dockerfile: DockerfileAngular            
    ports:
      - "4301:80"
    restart: always    
    networks:
      - shopapp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3            
          
networks:
  shopapp-network:
    name: shopapp-network
    driver: bridge

#docker-compose -f ./deployment.yaml down 
#docker-compose -f ./deployment.yaml up -d

#docker-compose -f ./deployment.yaml rm -s -f mysql8-container
#docker-compose -f ./deployment.yaml up -d mysql8-container

#docker-compose -f ./deployment.yaml rm -s -f phpmyadmin8-container
#docker-compose -f ./deployment.yaml up -d phpmyadmin8-container


#docker-compose -f ./deployment.yaml rm -s -f shopapp-spring-container 
#docker-compose -f ./deployment.yaml up -d shopapp-spring-container --build
#docker logs shopapp-spring-container

#docker-compose -f ./deployment.yaml rm -s -f shopapp-angular-container
#docker-compose -f ./deployment.yaml up -d shopapp-angular-container
#docker-compose -f ./deployment.yaml up -d shopapp-angular-container --build
#docker logs shopapp-angular-container 
#docker build -f DockerfileAngular -t shop-app-final-shop-app-angular . 

#docker-compose -f ./deployment.yaml rm -s -f redis-container
#docker-compose -f ./deployment.yaml up -d redis-container

#docker-compose -f ./deployment.yaml rm -s -f debezium-kafka-container
#docker-compose -f ./deployment.yaml up -d debezium-kafka-container
#docker-compose -f ./deployment.yaml up -d debezium-connect-container




